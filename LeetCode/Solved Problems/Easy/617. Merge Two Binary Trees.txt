
using LeetCode;


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution
{
    public TreeNode? MergeTrees(TreeNode root1, TreeNode root2)
    {
        if (root1 == null && root2 == null)
        {
            return null;
        }
        else if (root1 != null && root2 == null)
        {
            return root1;
        }
        else if (root1 == null && root2 != null)
        {
            return root2;
        }

        return MergeTreesPrivate(root1, root2);
    }

    private TreeNode? MergeTreesPrivate(TreeNode? root1, TreeNode? root2)
    {
        TreeNode? currentLevel = null;
        if (root1 != null || root2 != null)
        {
            currentLevel = new TreeNode();
            var val1 = root1 != null ? root1.val : 0;
            var val2 = root2 != null ? root2.val : 0;
            currentLevel.val = val1 + val2;
            currentLevel.left = MergeTreesPrivate(root1 != null ? root1.left : null, root2 != null ? root2.left : null);
            currentLevel.right = MergeTreesPrivate(root1 != null ? root1.right : null, root2 != null ? root2.right : null);
        }
        return currentLevel;
    }
}