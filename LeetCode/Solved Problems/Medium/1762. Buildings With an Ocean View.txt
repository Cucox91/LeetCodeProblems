var heights1 = new int[] { 4, 2, 4, 1 };
var heights2 = new int[] { 4, 3, 2, 1 };
var heights3 = new int[] { 1, 3, 2, 4 };



Solution s = new Solution();

var result = s.FindBuildings(heights3);
foreach (var item in result)
{
    Console.Write(item.ToString() + ',');
}
Console.WriteLine();

public class Solution
{
    public int[] FindBuildings(int[] heights)
    {
        Stack<(int index, int height)> myStack = new Stack<(int index, int height)>();

        for (int i = 0; i < heights.Length; i++)
        {
            if (myStack.Count == 0)
            {
                myStack.Push((i, heights[i]));
            }
            else
            {
                while (myStack.TryPeek(out (int index, int height) tupple) && tupple.height <= heights[i])
                {
                    myStack.Pop();
                }

                myStack.Push((i, heights[i]));
            }
        }

        var result = new int[myStack.Count];
        int idx = 0;
        while (myStack.Count > 0)
        {
            result[idx] = myStack.Pop().index;
            idx++;
        }

        return result.Reverse().ToArray();
    }
}