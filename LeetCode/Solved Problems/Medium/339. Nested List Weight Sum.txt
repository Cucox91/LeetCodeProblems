public class Solution
{

    public interface NestedInteger
    {
        // @return true if this NestedInteger holds a single integer, rather than a nested list.
        bool IsInteger();

        // @return the single integer that this NestedInteger holds, if it holds a single integer
        // The result is undefined if this NestedInteger holds a nested list
        int GetInteger();

        // Set this NestedInteger to hold a single integer.
        public void SetInteger(int value);

        // Set this NestedInteger to hold a nested list and adds a nested integer to it.
        public void Add(NestedInteger ni);

        // @return the nested list that this NestedInteger holds, if it holds a nested list
        // The result is undefined if this NestedInteger holds a single integer
        IList<NestedInteger> GetList();
    }

    public int DepthSum(IList<NestedInteger> nestedList)
    {
        return DepthSum(nestedList, 1);
    }

    private int DepthSum(IList<NestedInteger> nestedList, int depth)
    {
        int sum = 0;
        foreach (var integer in nestedList)
        {
            if (integer.IsInteger())
            {
                sum += integer.GetInteger() * depth;
            }
            else
            {
                sum += DepthSum(integer.GetList(), depth + 1);
            }
        }

        return sum;
    }
}